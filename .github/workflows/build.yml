# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: build

# name of GitHub event that triggers workflow
# https://help.github.com/en/actions/reference/events-that-trigger-workflows#watch-event-watch
on:
  # trigger when I star my own repo
  watch:
    types: [started]

  # trigger via webhook
  # https://github.com/adamrushuk/devops-lab/blob/master/TriggerCustomAction.ps1#L28
  repository_dispatch:
    types: [build]

  # enable manual workflow
  # https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#manually-running-a-workflow
  workflow_dispatch:
    inputs: {}

# global environment variables
# https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
env:
  # prefix: used for some globally unique name requirements
  PREFIX: arshz

  # debug
  CI_DEBUG: false

  # azure creds
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  # other
  # prod or staging.
  # "" disables cert-manager annotations (use if you already have an existing TLS secret)
  CERT_API_ENVIRONMENT: ""
  DNS_RG_NAME: rg-dns
  EMAIL_ADDRESS: certadmin@domain.com
  ENABLE_TLS_INGRESS: true
  FORCE_TEST_FAIL: false
  K8S_TLS_SECRET_NAME: tls-secret
  KEY_VAULT_CERT_NAME: wildcard-thehypepipe-co-uk
  KEY_VAULT_NAME: kv-rush-iz6y
  KEY_VAULT_RESOURCE_GROUP_NAME: rg-keyvault-acmebot
  # NOTE: "eastus" is cheaper than "uksouth"
  LOCATION: eastus
  NEXUS_USER_USERNAME: demo_user
  ROOT_DOMAIN_NAME: thehypepipe.co.uk
  # STORAGE_KEY: 'env var set by Get-StorageKey.ps1'
  VELERO_ENABLED: true
  WEAVE_SCOPE_ENABLED: false

  # terraform
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_PLAN: "tfplan"
  TF_VERSION: "0.12.30" # "latest" is supported
  TF_WORKING_DIR: ./terraform
  # https://github.com/terraform-linters/tflint-ruleset-azurerm/releases
  TFLINT_RULESET_AZURERM_VERSION: "v0.8.2"
  # https://github.com/terraform-linters/tflint/releases
  TFLINT_VERSION: "v0.24.1"

  # Env var concatenation is currently not supported at Workflow or Job scope. See workaround below:
  # https://github.community/t5/GitHub-Actions/How-can-we-concatenate-multiple-env-vars-at-workflow-and-job/td-p/48489

jobs:
  build-and-deploy:

    # always pin versions
    # view installed software: https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#supported-software
    runs-on: ubuntu-18.04

    # only run if owner triggered action
    if: github.actor == github.event.repository.owner.login

    steps:

    # Checkout
    # https://github.com/marketplace/actions/checkout
    - uses: actions/checkout@v2
      # specify different branch
      # NOT required as I've changed the default branch to develop
      # with:
      #   ref: develop

    # Init tasks - inc Env var concatenation
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#environment-files
    - name: Init tasks - inc Env var concatenation (Workaround)
      run: |
        chmod -R +x ./scripts/
        echo "AKS_CLUSTER_NAME=${{ env.PREFIX }}-aks-001" >> $GITHUB_ENV
        echo "AKS_RG_NAME=${{ env.PREFIX }}-rg-aks-dev-001" >> $GITHUB_ENV
        echo "ARGOCD_FQDN=argocd.${{ env.ROOT_DOMAIN_NAME }}" >> $GITHUB_ENV
        echo "DNS_DOMAIN_NAME=nexus.${{ env.ROOT_DOMAIN_NAME }}" >> $GITHUB_ENV
        echo "DOCKER_FQDN=docker.${{ env.ROOT_DOMAIN_NAME }}" >> $GITHUB_ENV
        echo "TERRAFORM_STORAGE_ACCOUNT=${{ env.PREFIX }}sttfstate${{ env.LOCATION }}001" >> $GITHUB_ENV
        echo "TERRAFORM_STORAGE_RG=${{ env.PREFIX }}-rg-tfstate-dev-001" >> $GITHUB_ENV
        echo "VELERO_STORAGE_ACCOUNT=${{ env.PREFIX }}stbckuksouth001" >> $GITHUB_ENV
        echo "VELERO_STORAGE_RG=${{ env.PREFIX }}-rg-velero-dev-001" >> $GITHUB_ENV


    # Login
    - name: Login to Azure
      run: ./scripts/azure_login.sh

    # This is required when developing after the initial build, and the AKS cluster may have been stopped
    # Ensure AKS cluster is running, else timeouts will occur on k8s Terraform apply tasks
    - name: Start AKS Cluster
      continue-on-error: true
      run: ./scripts/start_aks_cluster.sh


    # Prereqs
    - name: Create Storage Account for Terraform state
      run: ./scripts/storage_create.sh

    - name: Lookup Storage Key
      run: ./scripts/storage_key.sh

    - name: Replace tokens in Terraform config files
      run: pwsh -command "./scripts/Replace-Tokens.ps1"
      env:
        ARGOCD_ADMIN_PASSWORD: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        HELM_CHART_REPO_DEPLOY_PRIVATE_KEY: ${{ secrets.HELM_CHART_REPO_DEPLOY_PRIVATE_KEY }}
        IFTTT_WEBHOOK_KEY: ${{ secrets.IFTTT_WEBHOOK_KEY }}

    - name: Create zip file of Function App
      run: pwsh -command "./function_app/CreateFunctionAppZip.ps1"


    # Terraform
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init / Validate
      run: |
        terraform init
        terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Lint
      run: ./scripts/tflint.sh
      env:
        TF_WORKING_DIR: ${{ env.TF_WORKING_DIR }}
        TFLINT_RULESET_AZURERM_VERSION: ${{ env.TFLINT_RULESET_AZURERM_VERSION }}
        TFLINT_VERSION: ${{ env.TFLINT_VERSION }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -out=${{ env.TF_PLAN }}
      working-directory: ${{ env.TF_WORKING_DIR }}

    # - run: echo ${{ steps.plan.outputs.stdout }}
    # - run: echo ${{ steps.plan.outputs.stderr }}
    # - run: echo ${{ steps.plan.outputs.exitcode }}

    - name: Terraform Apply
      run: ./scripts/terraform_apply.sh
      # only apply if changes are present
      # https://www.terraform.io/docs/commands/plan.html#detailed-exitcode
      # if: steps.plan.outputs.exitcode == 2
      env:
        TF_PLAN: ${{ env.TF_PLAN }}


    # Kubernetes
    - name: Deploy kubernetes manifests
      run: ./scripts/k8s_manifests_apply.sh

    - name: Wait for resources to be "Ready"
      run: ./scripts/wait.sh


    # Ansible
    # TODO: enable Ansible Lint once this issue has been resolved: https://github.com/ansible/ansible-lint-action/issues/36
    # - name: Lint Ansible Playbook
    #   uses: ansible/ansible-lint-action@6c8c141
    #   with:
    #     targets: "./ansible"


    - name: Run Ansible playbook
      run: ./scripts/ansible.sh
      env:
        NEXUS_ADMIN_PASSWORD: ${{ secrets.NEXUS_ADMIN_PASSWORD }}
        NEXUS_USER_PASSWORD: ${{ secrets.NEXUS_USER_PASSWORD }}


    # Docker
    - name: Docker repo login
      uses: Azure/docker-login@v1
      with:
        login-server: ${{ env.DOCKER_FQDN }}
        username: ${{ env.NEXUS_USER_USERNAME }}
        password: ${{ secrets.NEXUS_USER_PASSWORD }}

    - name: Push images to Docker repo
      run: ./scripts/push_docker_images.sh


    # TODO: Remove once issue has been fixed
    # https://github.com/terraform-providers/terraform-provider-azurerm/issues/8546
    - name: Restart Function App
      run: az functionapp restart --name "${{ env.PREFIX }}-funcapp" --resource-group "${{ env.PREFIX }}-rg-function-app"


    # Pester tests
    - name: Run Pester tests
      continue-on-error: true
      run: pwsh -command "./scripts/Start-Test.ps1"

    - name: Archive test artifacts
      uses: actions/upload-artifact@v1
      with:
        name: test results
        path: test/pester-test-results.xml
      # TODO: only run when previous task (Pester tests) has been successful
      if: always()

    # remove NuGet proxy repo so pester report step doesnt fail
    - name: Unregister NuGet proxy repo
      run: pwsh -command "Unregister-PSRepository -Name nuget.org-proxy -Verbose"

    # Shows at the bottom of a run: https://github.com/adamrushuk/devops-lab/runs/1035347513?check_suite_focus=true
    - name: Pester report
      # TODO: remove continue-on-error once bug is fixed
      continue-on-error: true
      uses: zyborg/pester-tests-report@v1.3.2
      with:
        test_results_path: test/pester-test-results.xml
        report_name: pester_tests
        report_title: Pester Tests
        github_token: ${{ secrets.GITHUB_TOKEN }}


    # Notify
    - name: Notify slack
      continue-on-error: true
      env:
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      run: ./scripts/send_slack_message.sh "[aks-nexus-velero] Build complete"


  # used for any windows-only tasks
  test-windows:
    needs: build-and-deploy

    # https://github.com/actions/virtual-environments
    runs-on: windows-2019

    # only run if owner triggered action
    if: github.actor == github.event.repository.owner.login

    steps:
    # Checkout
    - uses: actions/checkout@v2

    # Init tasks - inc Env var concatenation
    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#environment-files
    - name: Init tasks - inc Env var concatenation (Workaround)
      # * NOTE: different syntax required for Windows agents
      run: |
        echo "AKS_RG_NAME=${{ env.PREFIX }}-rg-aks-dev-001" | Out-File -Append -Encoding utf8 -FilePath "$env:GITHUB_ENV"
        echo "AKS_CLUSTER_NAME=${{ env.PREFIX }}-aks-001" | Out-File -Append -Encoding utf8 -FilePath "$env:GITHUB_ENV"
        echo "DNS_DOMAIN_NAME=nexus.${{ env.ROOT_DOMAIN_NAME }}" | Out-File -Append -Encoding utf8 -FilePath "$env:GITHUB_ENV"


    # Login
    - name: Login to Azure
      run: ./scripts/azure_login.ps1

    # Chocolatey
    - name: Test Nexus Chocolatey proxy repo
      run: |
        choco install velero --source "https://${{ env.DNS_DOMAIN_NAME }}/repository/chocolatey-proxy/"

    # Velero CLI
    - name: Test Velero CLI
      #  NOTE: Some functions cast values to a string to perform comparisons
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#functions
      # ! WARNING: only single quotes work for boolean comparison
      if: env.VELERO_ENABLED == 'true'
      run: |
        az aks get-credentials --resource-group "${{ env.AKS_RG_NAME }}" --name "${{ env.AKS_CLUSTER_NAME }}" --overwrite-existing --admin

        echo "`nVelero version info:"
        velero version || true

        echo "`nVelero backup location info:"
        velero backup-location get

        echo "`nVelero backup info:"
        velero backup get
